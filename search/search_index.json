{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"en/","title":"Index","text":"<p> StrokeGen is a customized Blender build(1) developed by Wangziwei Jiang(2). </p> <ol> <li>Why not a plugin? Because the algorithm requires deep integration inside Blender, which is not possible with a python plugin. </li> <li>Who is Wangziwei Jiang?  A graphics programmer and 3D artist who is passionate about NPR and has been working on this project for years.</li> </ol> <ul> <li> <p> Downlads</p> <p> Beta Releases  Stable Releases</p> </li> <li> <p> Tutorials</p> <p> Quick Start Best Practice Documentation</p> </li> </ul>"},{"location":"en/#features","title":"Features","text":"<ul> <li> <p> Elegant curve topology</p> <p>Generate curves with a visually pleasant topology, essential for creating high-quality line art.</p> </li> <li> <p> Real-time response</p> <p>StrokeGen is designed to provide real-time feedback, allowing you to focus on your art.</p> </li> </ul> <p></p> <p> </p> <p>(Models from ucupumar)</p> <ul> <li> <p> Driven by Community</p> <p>Strokegen is still in development, and your feedback is essential to its success.</p> <p> Join the Discord community to share your thoughts and ideas.</p> </li> <li> <p> Open Source</p> <p>Strokegen is open-source software, and you can find the source code on GitHub</p> <p>In the future, if the feedbacks were good, we plan to merge the code into official Blender.</p> </li> </ul>"},{"location":"en/Afterword/","title":"Afterword","text":"A message from StrokeGen's creator <p>Hi, welcome to here reading my rambles :) By the way, I'm Wangziwei Jiang, the creator of StrokeGen.</p> <p>I'm passionate about stylized rendering, but frustrated with its lacking of technical progresses.  I'm fascinated &amp; experienced in GPU computing and real-time rendering.  In my free time, I also like to create some 3D art. I even worked as a outsourced artist for a while. </p> <p>All these traits have led me to create StrokeGen. It's a tool that expands the visions for artists, not a half-wit AI model that steals from you and try to replace you. </p> <p>Since my college days, I've been researching on real-time line art rendering, and it has been 6 years till now.  It was really a long journey, and I think this is the right time to share my work with the community.</p> <p>But to be honest, I'm not sure if I can keep maintaining it in the long run. A lot of things happened in my life, stressing me into heavy insomnia. It has almost burnt me out. </p> <p>Till this point of time, I've been working on it alone, during my free time, and I need to work to feed myself. On the other hand, StrokeGen requires a lot of efforts to maintain due to its complexity,  not to mention the new features I want to implement. </p> <p>With the current surge of AI based tools, I even doubt if there are still people interested in this kind of stuff. Anyways, I am satisfied even if it's just a small tool for a small group of people. I hope it can help you in your creative journey.</p> <p>Again, thank you for your interest in StrokeGen. I hope you enjoy using it as much as I enjoyed creating it.</p>"},{"location":"en/Best%20Practices/","title":"Best Practices","text":""},{"location":"en/Best%20Practices/#prepare-your-mesh","title":"Prepare your mesh","text":"<p>Like any other rendering algorithm, the performance of StrokeGen depends on the quality of your mesh.  To ensure the best performance, it is suggested to: </p> Cleanup messy topology <p>At least, fix all non-manifold geometry (1) and keep a meaningful poly-density for your quads/triangles.  It would be better if the mesh has been carefully modeled or re-topologized.  For 3D modeling people, you know what I mean - quad flows, vertex valency, density of quads, etc. </p> <ol> <li>Non-manifold geo mainly appears in scanned or brutally simplified meshes. In Blender, enter edit mode, \"select &gt; select All by trait &gt; Non Manifold\" to view them, </li> </ol> Triangulate your mesh(s) <p>For example, a triangulation modifier is required for a quad mesh / after a subdivision modifier. </p> Avoid thin shells <p>For example, an old outline trick is to apply a solidify modifier and slightly extrude the surface into a shell of two layers. This causes StrokeGen to render lines for both layers, resulting in unpleasant results. </p>"},{"location":"en/Best%20Practices/#performance-tips","title":"Performance Tips","text":"<p>In the beta version, StrokeGen follows a conservative strategy:  Each StrokeGen-enabled object should under two million triangles.(1) <ol> <li>This will change as the development continues.  </li> </ol> <p>Notes from the developer</p> <p>StrokeGen consists of intricate and complex GPU code, making it much harder to maintain than normal code.</p> <p>I only have limited time &amp; energy for it - I developed it alone during my free time, and I need to work to feed myself  . </p> <p>Considering the variety of users' GPUs, I decide to keep a conservative design. If you think this tool has potential, please provide your feedback on Discord, so that I can gradually improve it &amp; optimize it. </p>"},{"location":"en/Documentation/","title":"Documentation","text":"<p>In this page, we introduce the settings in detail to help you fully utilize StrokeGen.</p>"},{"location":"en/Documentation/#global-setting","title":"Global Setting","text":"<p>This controls the overall behavior of StrokeGen. </p> Settings to generating the 3D curves. <p>The names are self-explanatory, but here are some details:</p> <p>Blending Mode</p> <p>The blending mode for applying the curve color to the screen.  For advanced stylization, you should set it to Alpha Blend. </p> <p>Paper Mode</p> <p>Set this to one to only render the curves on the screen.  This is useful when you want to observe the curves only, without the mesh surface. </p>"},{"location":"en/Documentation/#per-object-setting","title":"Per-Object Setting","text":"<p>StrokeGen generates 3D curves from mesh surface,  then resamples them into 2D curves.</p> <p>Objects with different geometry characteristics(1)  may require different settings.</p> <ol> <li>For example, vertex density, hard/soft surfaces </li> </ol> <p>Per-Object Setting includes two parts:  Curve and Mesh-related parameters. </p>"},{"location":"en/Documentation/#curve-related-parameters","title":"Curve-related Parameters","text":"<p>This part of patrameters control the generation of 3D curves from the mesh surface.</p> Curve TypesCurve SegmentationVisibility Threshold <p>Currently StrokeGen supports only one type of curve: Contour. </p> <p>Contour is a curve that follows the silhouette of the mesh.  In other words, it separates the front-facing and back-facing parts of the mesh. </p> <p>Click image to view details and captions</p> <p> </p> <p>More Curve Types</p> <p>If StrokeGen got enough momentum  for further development (which I really doubt...),  Boundary, Intersection, Crease types will be added.</p> Smoothed Contour <p>This option smooths the contour curves by locally optimizing the surface around the contour. It is useful when the contour curves are too jagged.</p> <p>Your mesh should have enough vertex density to support the smoothing operation.</p> <p>Determines segmentation upon the 3D feature curves. Each segment will be regarded as an individual curve. This will affect the final 2D curve network, hence the stylization, such as tapering, texturing, etc. </p> <p>The segmentation schemes may differ according to the curve type.  For contour curves, StrokeGen supports two types of segmentation: cusp and corner.</p> Cusp2D Corner <p>Cusp is where the curve self-occludes, and the tangent direction changes abruptly. </p> <p>For example, the two points marked with \"3\" in the image below are cusps.  </p> <p>Here are two images comparing results without any segmentation and with cusp enabled.</p> <p> </p> <p>Sharp corners in the 2D space. </p> <p>When this is enabled, the curves will be split at those sharp corners.</p> <p>Corner Angle controls the angular threshold of the corner detection.</p> <p>Without any segmentation vs. with both cusp and corner enabled with a corner angle of 60 degrees.  </p> <p>This parameter controls the visibility of the 3D curves.  It is useful when you want to show some hidden curves that are very close to its occluder surface.</p> <p>The visibility threshold is the depth offset between the 3D curve and the mesh surface.  Usually a value from 0.1 - 0.3 is sufficient.</p> <p></p>"},{"location":"en/Documentation/#mesh-related-parameters","title":"Mesh-related Parameters","text":"<p>This controls the GPU processing of the mesh surface for better curve generation.</p> TessellationSurface Shading Type <p>StrokeGen adaptively tessellates the surface to refine the 3D curves.  This is required when your base mesh is too coarse to generate smooth curves. </p> <p></p> Tessellation LevelEnable Crease <p>Higher tessellation level results in better curves but may slow down the performance.</p> <p>If you mesh already had a subdiv modifier with 2 or higher levels, you should leave this value to 0.</p> <p>Usually, a value of 1 is sufficient for most cases. </p> <p>If the curves are still not smooth enough, you can increase this value to 2.</p> <p>This option enables the crease detection algorithm, which helps to generate better curves on sharp edges. It is useful when your mesh has sharp edges that are not well supported by the vertex normals.</p> <p>Better to keep this off and rely on your topology. It may generate unwanted curves on the mesh.</p> <p>Sometimes we have to handle transparency or other special shading types. For now StrokeGen supports only Opaque and Transparent shading types.</p> <p>Usually your strokegen object should be set to Opaque. Objects with Transparent shading type will not occlude any curves. </p>"},{"location":"en/Documentation/#per-material-setting","title":"Per-Material Setting","text":"<p>This controls how the 2D curves were drawn, including the line width, color, and other visual effects.</p> <p>Use an extra material solely for StrokeGen renderer and nothing else.</p> <p>There are two ways to render a 2D curve: Stamp and Vector.</p> <ul> <li>Stamp: walk along the input trajectory and place stamps of a brush footprint. </li> <li>Vector: generate a stroke mesh from the curve spline, then fill the stroke with color/texture.</li> </ul>"},{"location":"en/Documentation/#parameters","title":"Parameters","text":"Base ColorCurve WidthTextured Curve <p>The color of the 2D curve.</p> <p>Always remember to initialize the alpha to 1.</p> <p>The width of the 2D curve. </p> <p>This option enables the texture mapping on the 2D curve.  Once enabled, different options will be available for stamping and vector styles.  </p> Brush Texture &amp; TilingJittering for Stamped BrushesPaper Texture &amp; Tiling <p>The texture used for stamping brushes on the curve, or texturing the strokes.</p> <p>Note that the empty portion of the texture should have an alpha of 0.</p> <p>Brush Tiling: The tiling of the brush texture.</p> <ul> <li>For Stamping style, it is the tiling of the brush footprint.   Usually you should set this value to 1.      </li> <li>For Vector style, it is the tiling of the texture on the stroke.      An image of aspect ratio 4 : 1, with 4 elements, should have a tiling of 4.       An image of aspect ratio 8 : 1, should have a tiling of 8.     </li> </ul> <p></p> <p>If you've ever made custom brushes in Photoshop, you know what jittering is. It adds randomness to the brush footprint, making the curve more natural.</p> <p>StrokeGen supports jittering for stamped brushes. You can jitter the brush footprint in many ways: Scale, Position, Rotation, etc.         </p> <p> The texture to simulate the micro height variations on the paper surface. Stamped Brush only.</p> <p>For example, the left paper texture is a fractal noise generated in Substance Designer.</p> <p>Paper Tiling: The tiling of the paper texture. Usually you should set this value to 1.  However, you can increase it if your texture does not have enough high-frequency details.</p>"},{"location":"en/Known%20Issues/","title":"Known Issues","text":"<p>Flickers</p> <p>Flickering occurs for stylized lines when the camera / object is moving. This happens because of multiple reasons: Inaccurate visibility, Unstable curve segmentation, etc. </p> <p>No existing renderer / research can solve this perfectly. But I'm working on it. For details see the Roadmap section. </p> <p>Occasional Lagging</p> <p>Lagging occasionally happens when you enable / disable StrokeGen globally or per-object. This is due to StrokeGen preparing the GPU resources for processing your meshes. </p>"},{"location":"en/Quick%20Start/","title":"Quick Start","text":"<p>For now, StrokeGen focuses on your \"hero\" assets,   for example, the main character, creature, or a vehicle,  which has rich geometric details.  From the hero asset, you can use StrokeGen to explore a variety of line art styles in real time. </p> <p>Here is a quick guide to get you started.</p>"},{"location":"en/Quick%20Start/#basic-curve-rendering","title":"Basic Curve Rendering","text":"<p>The following youtube video demonstrates how to set up StrokeGen for a simple curve rendering.</p>"},{"location":"en/Quick%20Start/#curve-stylization","title":"Curve Stylization","text":""},{"location":"en/Quick%20Start/#prepare-your-mesh","title":"Prepare your mesh","text":"<p>StrokeGen works best when your mesh has a clean topology.  If your mesh is carefully crafted for subdivision or animation, then it is sufficient. </p> <p>Otherwise, Best Practice will guide you through the process of creating a clean mesh.</p>"},{"location":"en/Quick%20Start/#stamping-brushes","title":"Stamping Brushes","text":"<p>Watch this youtube video to apply Photoshop-style painting brushes to the curves.</p>"},{"location":"en/Quick%20Start/#vectorized-curves","title":"Vectorized Curves","text":"<p>Watch this youtube video to learn the basics of using Adobe-Illustrator-style vectorized curves. </p>"},{"location":"en/Roadmap/","title":"Roadmap","text":""},{"location":"en/Roadmap/#roadmap","title":"Roadmap","text":"<p>StrokeGen is in the beta stage, and the current goal is to improve the stability and user experience. In the future, if the feedbacks were good, we plan to merge the code into official Blender.</p> <p>Hopefully StrokeGen gets enough attention &amp; success that I have the momentum and get ppl to work on it. If so, there are two most important features that I'll be working on: </p> Animation StabilizerMore curve types <p>Curve tracking is required to make StrokeGen feasible for animations.</p> <p>StrokeGen already has a tracking framework that walks on the surface.  </p> <p>Now I just have to be more specific:</p> <ol> <li>Reduce flickers in curve tapering (2-3 months) </li> <li>Improve curve visibility (1 month) </li> <li>Stablize arc-length parameterization (This may take forever) </li> </ol> <p>Generate Intersection / Crease / Shadow / Highlight curves from the 3d surface. Generate Hatching / Painting strokes from the 2d image and 3d surface.  The goal is to implement a GPU-based algorithm for this feature and make it real-time.</p> <p>Intersection is the hardest to implement,  Crease is of medium difficulty,  Shadow/Highlight are the easiest. </p> <p>Have some parctical designs. Planned after the animation stabilizer.</p> <p>There are also some other features that I had in mind:</p> Advanced Brush SimulationGrease Pencil and Geometry NodeAI related features <p>Allowing more comlicated brush behaviors, such as: </p> <ol> <li>Allowing user to set a 3D brush for simulating complexed bristle behaviours </li> <li>GPU simulation of natural media painting, such as watercolor and ink painting. </li> </ol> <p> </p> <p>Should be simple. Just re-implement existing algorithms in Blender.</p> <p>Support seamless conversion between strokegen curves and Grease Pencil strokes. If possible, our temporal denoiser can be used to track Grease Pencil drawings. </p> <p>Looking for collaborators to help with this feature</p> <p>Help with training a sketch-based mesh generation network. StrokeGen can provide high-quality feature curves, along with the 3D mesh for the training data. I think this is a very natural and good idea, but I don't have the time to do it.</p> <p>Implement a diffusion model for interactive cel shading and colorization. AI colorization models often requires an edge/outline map to control the output,   and StrokeGen provides high quality line art to help guide this process. </p> <p>Looking for collaborators to help with this feature</p> <p>The development of StrokeGen depends on the feedback from the artist community,  please join the Discord server and share your thoughts and ideas!</p>"},{"location":"en/User%20Guide/","title":"Best Practices","text":""},{"location":"en/User%20Guide/#prepare-your-mesh","title":"Prepare your mesh","text":"<p>Like any other rendering algorithm, the performance of StrokeGen depends on the quality of your mesh.  To ensure the best performance, it is suggested to: </p> Cleanup messy topology <p>At least, fix all non-manifold geometry (1) and keep a meaningful poly-density for your quads/triangles.  It would be better if the mesh has been carefully modeled or re-topologized.  For 3D modeling people, you know what I mean - quad flows, vertex valency, density of quads, etc. </p> <ol> <li>Non-manifold geo mainly appears in scanned or brutally simplified meshes. In Blender, enter edit mode, \"select &gt; select All by trait &gt; Non Manifold\" to view them, </li> </ol> Triangulate your mesh(s) <p>For example, a triangulation modifier is required for a quad mesh / after a subdivision modifier. </p> Avoid thin shells <p>For example, an old outline trick is to apply a solidify modifier and slightly extrude the surface into a shell of two layers. This causes StrokeGen to render lines for both layers, resulting in unpleasant results. </p>"},{"location":"en/User%20Guide/#performance-tips","title":"Performance Tips","text":"<p>In the beta version, StrokeGen follows a conservative strategy:  Each StrokeGen-enabled object should under two million triangles.(1) <ol> <li>This will change as the development continues.  </li> </ol> <p>Notes from the developer</p> <p>StrokeGen consists of intricate and complex GPU algorithms, making it much harder to maintain than normal code.</p> <p>I only have limited time &amp; energy for it - I developed it alone during my free time, and I need to work to feed myself  . </p> <p>Considering the variety of users' GPUs, I decide to be conservative first. If you think this tool has potential, please provide your feedback on Discord, so that I can gradually improve it &amp; optimize for different hardwares. </p>"}]}